<UserControl x:Class="MCUScope.Views.TriggerSelectionView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:sys="clr-namespace:System;assembly=mscorlib" 
             xmlns:enums="clr-namespace:MCUScope.Enums" 
             xmlns:entity_models="clr-namespace:Entities.Models;assembly=Entities" 
             xmlns:device_infrastructure_models="clr-namespace:DeviceCommunicators.Models;assembly=DeviceCommunicators"
             xmlns:mcu_modles="clr-namespace:DeviceCommunicators.MCU;assembly=DeviceCommunicators"
             xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks" 
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:mah="http://metro.mahapps.com/winfx/xaml/controls" 
             xmlns:converter_global="clr-namespace:Converters;assembly=Converters"
             xmlns:validation_rules="clr-namespace:MCUScope.ValidationRules"
             xmlns:local="clr-namespace:MCUScope.Views"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800" MinWidth="600">

    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/Controls;component/Resources/ButtonWithIcon.xaml" />
                <ResourceDictionary Source="pack://application:,,,/Controls;component/Resources/ToggleButtonWithIcon.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <converter_global:EnumDescriptionConverter x:Key="EnumDescriptionConverter" />

            <ObjectDataProvider MethodName="GetValues" 
                                ObjectType="{x:Type sys:Enum}"
                                x:Key="triggerTypesEnum">
                <ObjectDataProvider.MethodParameters>
                    <x:Type TypeName="enums:TriggerTypesEnum" />
                </ObjectDataProvider.MethodParameters>
            </ObjectDataProvider>

            <ObjectDataProvider MethodName="GetValues" 
                                ObjectType="{x:Type sys:Enum}"
                                x:Key="triggerPositionTypesEnum">
                <ObjectDataProvider.MethodParameters>
                    <x:Type TypeName="enums:TriggerPositionTypesEnum" />
                </ObjectDataProvider.MethodParameters>
            </ObjectDataProvider>

        </ResourceDictionary>
    </UserControl.Resources>



    <Grid Margin="5">
        <Grid.RowDefinitions>
            <RowDefinition Height="27" />
            <RowDefinition Height="5" />
            <RowDefinition Height="27" />
            <RowDefinition Height="5" />
            <RowDefinition Height="27" />
            <RowDefinition Height="5" />
            <RowDefinition Height="27" />
            <RowDefinition Height="5" />
            <RowDefinition Height="27" />
            <RowDefinition Height="5" />
            <RowDefinition Height="27" />
            <RowDefinition Height="15" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="100" />
            <ColumnDefinition Width="5" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>

        <ToggleButton Grid.Row="0" Grid.Column="0"
                      Style="{StaticResource ToggleButtonWithIconStyle}"
                      HorizontalAlignment="Left"
                      Width="25"
                      ToolTip="Continuous"
                      Margin="0,1,5,1"
                      Command="{Binding ContinuousCommand}"
                      IsChecked="{Binding IsContinuous}">
            <iconPacks:PackIconModern Kind="TransformRotateCounterclockwise" Width="15" Height="15"/>
        </ToggleButton>


        <TextBlock Grid.Row="2" Grid.Column="0" Text="Type" VerticalAlignment="Center" />
        <ComboBox Grid.Row="2" Grid.Column="2" 
                  ItemsSource="{Binding Source={StaticResource triggerTypesEnum}}"
                  SelectedItem="{Binding TriggerData.TriggerType}"
                  ToolTip="The type of the trigger (Rising Edge, Falling Edge, etc.)"/>

        <TextBlock Grid.Row="4" Grid.Column="0" Text="Value" VerticalAlignment="Center" />
        <TextBox Grid.Row="4" Grid.Column="2" Text="{Binding TriggerData.TriggerValue}"  
                 ToolTip="The value that the trigger parameter should rich to start the recording"/>

        <TextBlock Grid.Row="6" Grid.Column="0" Text="Position" VerticalAlignment="Center" />
        <ComboBox Grid.Row="6" Grid.Column="2" 
                  ItemsSource="{Binding Source={StaticResource triggerPositionTypesEnum}}"
                  SelectedItem="{Binding TriggerData.TriggerPosition}"
                  ToolTip="Indicate how many samples to record before and after the trigger and the recording length">

            <ComboBox.ItemTemplate>
                <DataTemplate>
                    <TextBlock Text="{Binding Converter={StaticResource EnumDescriptionConverter}}"/>
                </DataTemplate>
            </ComboBox.ItemTemplate>

        </ComboBox>

        <!--<TextBlock Grid.Row="8" Grid.Column="0" Text="Interval" VerticalAlignment="Center" />-->
        <StackPanel Grid.Row="8" Grid.Column="2" Orientation="Horizontal">

            <TextBlock Grid.Column="1" Text="Recording interval:" VerticalAlignment="Center" Margin="0,0,5,0"/>
            <mah:NumericUpDown Interval="{Binding RecordIntervalStep}"
                               Minimum="{Binding RecordIntervalMin}"
                               Maximum="{Binding RecordIntervalMax}"
                               Value="{Binding TriggerData.Interval, UpdateSourceTrigger=PropertyChanged}"
                               Width="150"
                               ToolTip="The length of time the recording will take.">

                <!--<mah:NumericUpDown.Resources>
                    <validation_rules:BindingProxy x:Key="proxy" Data="{Binding TriggerData.Interval, UpdateSourceTrigger=PropertyChanged, StringFormat={}{0:#.0000000}}"/>
                </mah:NumericUpDown.Resources>



                <mah:NumericUpDown.Value>
                    <Binding Path="TriggerData.Interval" UpdateSourceTrigger="PropertyChanged">
                        <Binding.ValidationRules>
                            <validation_rules:RecordingTimeValidationRule >

                                <validation_rules:RecordingTimeValidationRule.RecordingTimeWrapper>
                                    <validation_rules:RecordingTimeWrapper RecordingTime="{Binding Data, Source={StaticResource proxy}}" />
                                </validation_rules:RecordingTimeValidationRule.RecordingTimeWrapper>

                            </validation_rules:RecordingTimeValidationRule>
                        </Binding.ValidationRules>
                    </Binding>
                </mah:NumericUpDown.Value>-->


            </mah:NumericUpDown>
            <TextBlock Grid.Column="1" Text="sec" VerticalAlignment="Center" Margin="0,0,100,0"/>
            
        </StackPanel>
        


        <TextBlock Grid.Row="10" Grid.Column="0" Text="Selected Keyword" VerticalAlignment="Center" />
        <TextBlock Grid.Row="10" Grid.Column="2" Text="{Binding TriggerData.TriggerKeyword}" FontWeight="DemiBold" VerticalAlignment="Center"/>

        <TextBlock Grid.Row="12" Grid.Column="0" Text="Search keyword" VerticalAlignment="Center" />
        <Grid Grid.Row="12" Grid.Column="2" ToolTip="The parameter on which the trigger will wait">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="5"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            
            

            <Grid Grid.Row="0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="5" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="2" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <TextBox mah:TextBoxHelper.ClearTextButton="True"
                        mah:TextBoxHelper.UseFloatingWatermark="True"
                        mah:TextBoxHelper.Watermark="Search..."
                        mah:TextBoxHelper.WatermarkAlignment="Left"
                        SpellCheck.IsEnabled="True"
                        ToolTip="Search the parameter on which the trigger will wait"
                        Grid.Column="0">

                    <i:Interaction.Triggers>

                        <i:EventTrigger EventName="TextChanged">
                            <i:InvokeCommandAction Command="{Binding Path=DataContext.DeviceParamSearch_TextChanged, 
                                                             Mode=OneWay, 
                                                             RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}}" 
                                           PassEventArgsToCommand="True"/>
                        </i:EventTrigger>

                    </i:Interaction.Triggers>

                </TextBox>

                <Button Grid.Column="2" Style="{StaticResource ButtonWithIconStyle}"
                        Width="25"
                        Height="25"
                        Margin="0,1,0,1"
                        ToolTip="Expand all"
                        Command="{Binding ExpandAllCommand}">
                    <iconPacks:PackIconMaterial Kind="ArrowExpandAll" />
                </Button>

                <Button Grid.Column="4" Style="{StaticResource ButtonWithIconStyle}"
                        Width="25"
                        Height="25"
                        Margin="0,1,0,1"
                        ToolTip="collapse all"
                        Command="{Binding CollapseAllCommand}">
                    <iconPacks:PackIconMaterial Kind="ArrowCollapseAll" />
                </Button>

            </Grid>

            <TreeView Grid.Row="2"
                      ItemsSource="{Binding McuDevice.MCU_GroupList}"
                      Background="Transparent"
                      BorderBrush="{DynamicResource MahApps.Brushes.Accent2}"
                      BorderThickness="1"
                      FontSize="14"
                      MaxHeight="200">

                <TreeView.Resources>
                    <Style TargetType="TreeViewItem">
                        <Setter Property="Visibility" Value="{Binding Visibility}" />
                        <Setter Property="IsExpanded" Value="{Binding IsExpanded}" />
                    </Style>


                    <HierarchicalDataTemplate DataType="{x:Type mcu_modles:MCU_DeviceData}" ItemsSource="{Binding MCU_GroupList}" >
                        <TextBlock Text="{Binding Path=Name}" Margin="0,2" />
                    </HierarchicalDataTemplate>
                    <HierarchicalDataTemplate DataType="{x:Type device_infrastructure_models:DeviceData}" ItemsSource="{Binding ParemetersList}">
                        <TextBlock Text="{Binding Path=Name}" Margin="0,2"/>
                    </HierarchicalDataTemplate>
                    <HierarchicalDataTemplate DataType="{x:Type mcu_modles:ParamGroup}" ItemsSource="{Binding ParamList}">
                        <TextBlock Text="{Binding Path=GroupName}" Margin="0,2" />
                    </HierarchicalDataTemplate>
                    <DataTemplate DataType="{x:Type device_infrastructure_models:DeviceParameterData}" >
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="10" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <RadioButton Grid.Column="0" GroupName="KeywordSelection" Margin="0,2" IsChecked="{Binding IsSelected}">
                                <i:Interaction.Triggers>

                                    <i:EventTrigger EventName="Checked">
                                        <i:InvokeCommandAction Command="{Binding Path=DataContext.KeywordRadioCheckedCommand, 
                                                             Mode=OneWay, 
                                                             RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}}" 
                                                             PassEventArgsToCommand="False"
                                                               CommandParameter="{Binding}"/>
                                    </i:EventTrigger>

                                </i:Interaction.Triggers>
                            </RadioButton>

                            <TextBlock Grid.Column="2" Text="{Binding Path=Name}" Margin="0,2"/>

                        </Grid>
                    </DataTemplate>

                </TreeView.Resources>
            </TreeView>
        </Grid>

        

    </Grid>

</UserControl>
